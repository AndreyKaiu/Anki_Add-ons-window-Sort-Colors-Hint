# -*- coding: utf-8 -*-
# Add-on for the Anki program. For the window with add-ons, it implements the ability 
# to sort and color the list, it is possible to set a hint for a specific add-on.
# https://github.com/AndreyKaiu/Anki_Add-ons-window-Sort-Colors-Hint
# Version 1.3, date: 2025-04-26
import subprocess
import sys
import traceback
import os
import re
import json
import time
import aqt
import aqt.forms
import aqt.main
import anki.lang
from aqt.addons import AddonsDialog
from aqt.addons import ConfigEditor
from aqt import mw
from aqt.addons import AddonManager
from aqt.addons import GetAddons
from aqt.addons import DownloaderInstaller
from aqt.addons import download_addons
from aqt.qt import *
from aqt.qt import QApplication
from aqt import gui_hooks
from aqt.gui_hooks import addons_dialog_will_show
from aqt.gui_hooks import addons_dialog_did_change_selected_addon
from aqt.gui_hooks import dialog_manager_did_open_dialog
from aqt.utils import (askUser, showInfo, tooltip, showText, tr)
from aqt.theme import theme_manager
from datetime import datetime
from pathlib import Path
from types import MethodType
import shutil

# ========================= PYQT_VERSION ======================================
try:    
    from PyQt6.QtCore import Qt, QTimer, QRegularExpression, QSize, QEvent, QTimer
    from PyQt6.QtWidgets import QLabel, QListWidgetItem, QStyledItemDelegate, QListWidgetItem, QTextEdit, QListWidget, QDialog, QVBoxLayout
    from PyQt6.QtGui import QTextDocument, QTextCursor, QColor, QSyntaxHighlighter, QPainter, QPalette, QTextCharFormat, QFont   
    pyqt_version = "PyQt6"
except ImportError:
    from PyQt5.QtCore import Qt, QTimer, QRegularExpression, QSize, QEvent, QTimer
    from PyQt5.QtWidgets import QLabel, QListWidgetItem, QStyledItemDelegate, QListWidgetItem, QTextEdit, QListWidget, QDialog, QVBoxLayout
    from PyQt5.QtGui import QTextDocument, QTextCursor, QColor, QSyntaxHighlighter, QPainter, QPalette, QTextCharFormat, QFont
    pyqt_version = "PyQt5"  
# =============================================================================

if pyqt_version == "PyQt6":    
    QTextCursor_KeepAnchor = QTextCursor.MoveMode.KeepAnchor
    QTextDocument_FindBackward = QTextDocument.FindFlag.FindBackward    
    QEvent_Resize = QEvent.Type.Resize
    QEvent_Paint = QEvent.Type.Paint
    QEvent_Show = QEvent.Type.Show
    QEvent_WindowActivate = QEvent.Type.WindowActivate
    QTextCursor_NoMove = QTextCursor.MoveOperation.NoMove
    QTextCursor_Start = QTextCursor.MoveOperation.Start
    QTextCursor_StartOfLine = QTextCursor.MoveOperation.StartOfLine
    QTextCursor_StartOfBlock = QTextCursor.MoveOperation.StartOfBlock
    QTextCursor_StartOfWord = QTextCursor.MoveOperation.StartOfWord
    QTextCursor_PreviousBlock = QTextCursor.MoveOperation.PreviousBlock
    QTextCursor_PreviousCharacter = QTextCursor.MoveOperation.PreviousCharacter
    QTextCursor_PreviousWord = QTextCursor.MoveOperation.PreviousWord
    QTextCursor_Up = QTextCursor.MoveOperation.Up
    QTextCursor_Left = QTextCursor.MoveOperation.Left
    QTextCursor_WordLeft = QTextCursor.MoveOperation.WordLeft
    QTextCursor_End = QTextCursor.MoveOperation.End
    QTextCursor_EndOfLine = QTextCursor.MoveOperation.EndOfLine
    QTextCursor_EndOfWord = QTextCursor.MoveOperation.EndOfWord
    QTextCursor_EndOfBlock = QTextCursor.MoveOperation.EndOfBlock
    QTextCursor_NextBlock = QTextCursor.MoveOperation.NextBlock
    QTextCursor_NextCharacter = QTextCursor.MoveOperation.NextCharacter
    QTextCursor_NextWord = QTextCursor.MoveOperation.NextWord
    QTextCursor_Down = QTextCursor.MoveOperation.Down
    QTextCursor_Right = QTextCursor.MoveOperation.Right
    QTextCursor_WordRight = QTextCursor.MoveOperation.WordRight
    QTextCursor_NextCell = QTextCursor.MoveOperation.NextCell
    QTextCursor_PreviousCell = QTextCursor.MoveOperation.PreviousCell
    QTextCursor_NextRow = QTextCursor.MoveOperation.NextRow
    QTextCursor_PreviousRow = QTextCursor.MoveOperation.PreviousRow
else:    
    QTextCursor_KeepAnchor = QTextCursor.KeepAnchor
    QTextDocument_FindBackward = QTextDocument.FindBackward
    QEvent_Resize = QEvent.Resize
    QEvent_Paint = QEvent.Paint
    QEvent_Show = QEvent.Show
    QEvent_WindowActivate = QEvent.WindowActivate
    QTextCursor_NoMove = QTextCursor.NoMove
    QTextCursor_Start = QTextCursor.Start
    QTextCursor_StartOfLine = QTextCursor.StartOfLine
    QTextCursor_StartOfBlock = QTextCursor.StartOfBlock
    QTextCursor_StartOfWord = QTextCursor.StartOfWord
    QTextCursor_PreviousBlock = QTextCursor.PreviousBlock
    QTextCursor_PreviousCharacter = QTextCursor.PreviousCharacter
    QTextCursor_PreviousWord = QTextCursor.PreviousWord
    QTextCursor_Up = QTextCursor.Up
    QTextCursor_Left = QTextCursor.Left
    QTextCursor_WordLeft = QTextCursor.WordLeft
    QTextCursor_End = QTextCursor.End
    QTextCursor_EndOfLine = QTextCursor.EndOfLine
    QTextCursor_EndOfWord = QTextCursor.EndOfWord
    QTextCursor_EndOfBlock = QTextCursor.EndOfBlock
    QTextCursor_NextBlock = QTextCursor.NextBlock
    QTextCursor_NextCharacter = QTextCursor.NextCharacter
    QTextCursor_NextWord = QTextCursor.NextWord
    QTextCursor_Down = QTextCursor.Down
    QTextCursor_Right = QTextCursor.Right
    QTextCursor_WordRight = QTextCursor.WordRight
    QTextCursor_NextCell = QTextCursor.NextCell
    QTextCursor_PreviousCell = QTextCursor.PreviousCell
    QTextCursor_NextRow = QTextCursor.NextRow
    QTextCursor_PreviousRow = QTextCursor.PreviousRow


    

def logError(e):
    # print("logError: ", e)
    return 

# ========================= CONFIG ============================================
# Loading the add-on configuration
config = mw.addonManager.getConfig(__name__)
meta  = mw.addonManager.addon_meta(__name__)
this_addon_provided_name = meta.provided_name

def configF(par1, par2, default=""):
    """–ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
    try:
        ret = config[par1][par2]
        return ret
    except Exception as e:        
        logError(e)
        return default     

languageName = configF("GLOBAL_SETTINGS", "language", "en")
current_language = anki.lang.current_lang #en, pr-BR, en-GB, ru –∏ –ø–æ–¥–æ–±–Ω–æ–µ 
if not languageName: # –µ—Å–ª–∏ –Ω–∞–¥–æ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ       
    languageName = current_language
    if languageName not in config["LOCALIZATION"]:        
        languageName = "en" # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π                
    
try:
    localization = config["LOCALIZATION"][languageName]
except Exception as e:
    text = f"ERROR in add-on '{this_addon_provided_name}'\n"
    text += f"Config[\"GLOBAL_SETTINGS\"][\"language\"] does not contain '{languageName}'"
    text += "\nChange the add-on configuration, \"language\": \"en\""
    languageName = "en"
    config["GLOBAL_SETTINGS"]["language"] = languageName # –º–µ–Ω—è–µ–º —è–∑—ã–∫
    mw.addonManager.writeConfig(__name__, config) # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏  
    showText(text, type="error")

def localizationF(par1, default=""):
    """–ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ localization = config["LOCALIZATION"][languageName] """
    try:
        ret = localization[par1]
        return ret
    except Exception as e:        
        logError(e)
        return default      



# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
current_sort_flag = 0  # 0 - no, 1 - Sort1, 2 - Sort2
try:
    current_sort_flag = configF("GLOBAL_SETTINGS","sorting_type", 0)
except Exception as e: logError(e)

    
def restart_anki():
    anki_exe = sys.executable
    # –¢–æ–ª—å–∫–æ –∏–º—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞, –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∏–Ω–∞—á–µ Anki –ø–æ–¥—É–º–∞–µ—Ç —á—Ç–æ –µ–º—É –ø–µ—Ä–µ–¥–∞–ª–∏ .apkg
    subprocess.Popen([anki_exe])
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é Anki –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π
    QTimer.singleShot(100, mw.close)    
# –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–Ω—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
action = QAction(localizationF("Restart_Anki", "üîÑ Restart Anki"), mw)
action.setShortcut("Alt+Shift+F4")
action.triggered.connect(restart_anki)
mw.form.menuTools.addAction(action)


active_profile = 1 # –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–∑–∞–≥—Ä—É–∂–µ–Ω  —Å anki)
current_profile = active_profile # —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π
profile_list_addons = []
the_profile_will_change = False # –µ—Å–ª–∏ –º–µ–Ω—è—é—Ç –ø—Ä–æ—Ñ–∏–ª—å

def create_and_load_profiles():        
    """—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –∏ –∑–∞–≥—Ä—É–∑–∫–∞"""
    global active_profile, current_profile, profile_list_addons, the_profile_will_change
    try:
        # –ü—É—Ç—å –∫ meta.json
        addon_dir = Path(mw.addonManager.addonsFolder()) / __name__
        meta_path = addon_dir / "meta.json"
        original_mtime = None
        # –ß–∏—Ç–∞–µ–º meta.json
        if meta_path.exists():
            original_mtime = os.path.getmtime(meta_path) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            with open(meta_path, "r", encoding="utf-8") as f:
                meta = json.load(f)

        we_will_write = False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ñ–∏–ª–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for i in range(1, 6):
            key = f"profile{i}"
            if key not in meta:
                we_will_write = True
                meta[key] = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º active_profile, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if "active_profile" not in meta:
            we_will_write = True
            meta["active_profile"] = 1

        # –ø–æ–ª—É—á–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        active_profile = meta.get("active_profile", 1)     
        # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª. –ø—Ä–æ—Ñ–∏–ª–µ–π
        if active_profile < 1:
            active_profile = 1
        elif active_profile > 5:
            active_profile = 5
        current_profile = active_profile # —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é        
        profile_key = f"profile{active_profile}"
        profile_list_addons = meta.get(profile_key, [])

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ meta.json –µ—Å–ª–∏ —á–µ–≥–æ –º–µ–Ω—è–ª–∏ we_will_write == True
        if we_will_write == True:            
            with open(meta_path, "w", encoding="utf-8") as f:
                json.dump(meta, f, ensure_ascii=False, indent=4)
            if original_mtime:
                os.utime(meta_path, (original_mtime, original_mtime))  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏

    except Exception as e: logError(e)       
    

# —Å–æ–∑–¥–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
create_and_load_profiles()



# =============================================================================   

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (–∏–∑ anki-main\qt\aqt\addons.py)
original_redraw = AddonsDialog.redrawAddons
current_dialog = None # —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç dialog 
CurrentAddon = ["",""] # –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, dir_name –∏ provided_name

theme_night = True
def dialog_will_show(dialog):
    """–ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–∞—Å—Ç—Ä–æ–∏–º —Å–≤–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"""    
    global theme_night
    if theme_manager.night_mode: # –æ–ø—Ä–µ–¥–µ–ª—è–º —Ç–µ–º–Ω–∞—è –∏–ª–∏ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
        theme_night = True
    else:
        theme_night = False

    for child in dialog.findChildren(QLabel):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é
        if child.x() < 170  and child.y() < 130:
            original_text = child.text()
            if "[Alt+Shift+F4]" not in original_text:
                child.setText(original_text + " [Alt+Shift+F4]")
            break

    QShortcut(QKeySequence("Alt+Shift+F4"), dialog, lambda: restart_anki())        
            
        
    global current_dialog
    current_dialog = dialog 
    setup_context_menu(current_dialog.form.addonList, current_dialog)
    add_buttons_to_addons_dialog(dialog)
    if CurrentAddon[0] == "":
        QTimer.singleShot(150, lambda:dialog.form.addonList.setCurrentRow(-1))
    else:
        #QTimer.singleShot(300, lambda:setCurrentItem(dialog, CurrentAddon))
        setCurrentItem(dialog, CurrentAddon)

    # global current_profile
    # QTimer.singleShot(300, lambda:save_profile(current_profile))
     
           

def change_selected_addon(dialog, add_on):    
    CurrentAddon[0] = add_on.dir_name
    CurrentAddon[1] = add_on.provided_name


def setCurrentItem(dialog, curAddon):        
    if curAddon[1] != "":            
        if dialog.form.addonList.count() > 0:
            i = 0            
            for addon in dialog.addons:
                if addon.dir_name == curAddon[0]:                    
                    dialog.form.addonList.setCurrentRow(i)
                    item = dialog.form.addonList.item(i)   
                    dialog.form.addonList.scrollToItem(item)  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                    break
                i += 1        

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ö—É–∫—É addons_dialog_did_change_selected_addon
addons_dialog_did_change_selected_addon.append(change_selected_addon)                
# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ö—É–∫—É addons_dialog_will_show
addons_dialog_will_show.append(dialog_will_show)



# ============================================================================= 
colorsHL = {
    "dark": {
        "number": "#ffaea8",
        "const": "#569cd6",
        "brace": "#cccccc",
        "brace1": "#bb0000",
        "brace2": "#ffff00",
        "brace3": "#fc4e77",
        "brace4": "#179fff",
        "key": "#007acc",
        "key1": "#009aaa",
        "key2": "#999999",
        "string": "#d69d85"
    },
    "light": {
        "number": "#ffaea8",
        "const": "#569cd6",
        "brace": "#000000",
        "brace1": "#bb0000",
        "brace2": "#e80af7",
        "brace3": "#fc4e77",
        "brace4": "#179fff",
        "key": "#007acc",
        "key1": "#009aaa",
        "key2": "#999999",
        "string": "#7d3618"
    }
}



class LineNumberArea(QWidget):    
    def __init__(self, editor):        
        super().__init__(editor)
        self.editor = editor        
  

    def paintEvent(self, event):               
        lnbgcolor = "#363636" if theme_night else "#e5efe5"        
        lntcolor = "#FFFFFF" if theme_night else "#000000" 
        self.setStyleSheet("background-color: "+ lnbgcolor + "; color: "  + lntcolor + ";") 
        painter = QPainter(self)
        painter.fillRect(event.rect(), QColor(lnbgcolor))       

        document = self.editor.document()
        font_metrics = self.editor.fontMetrics()
        line_height = font_metrics.height()

        scroll_value = self.editor.verticalScrollBar().value()
        page_bottom = scroll_value + self.editor.viewport().height()

        cursor = self.editor.cursorForPosition(QPoint(0, 0))
        first_visible_block = cursor.block()
        first_visible_block_number = first_visible_block.blockNumber()
        rect = self.editor.cursorRect(cursor)
        top = rect.top()

        block = first_visible_block
        block_number = first_visible_block_number

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
        current_block_number = self.editor.textCursor().blockNumber()
               

        while block.isValid() and top <= page_bottom:
            if block.isVisible():                
                number = str(block_number + 1)
                # –¶–≤–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                if block_number == current_block_number:
                    color = QColor("#ffd700") if theme_night else QColor("#af00db")
                    painter.setPen( color )  # —Ü–≤–µ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ 
                    font = painter.font()
                    font.setBold(True)
                    painter.setFont(font)
                else:                    
                    color = QColor("##FFFFFF") if theme_night else QColor("#000000")
                    painter.setPen( color )
                    font = painter.font()
                    font.setBold(False)
                    painter.setFont(font)
                painter.drawText(
                    0, int(top), self.width() - 5, line_height,
                    Qt.AlignmentFlag.AlignRight if pyqt_version == "PyQt6" else Qt.AlignRight, number
                )

                if block_number == current_block_number:
                    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å–≤–µ—Ä—Ö—É
                    color = QColor("#ffd700") if theme_night else QColor("#af00db")
                    pen = QPen(color)
                    pen.setWidthF(0.5)
                    painter.setPen(pen)
                    painter.drawLine(0, int(top), self.width(), int(top))
                   

            block = block.next()
            cursor.movePosition(QTextCursor.MoveOperation.NextBlock)
            rect = self.editor.cursorRect(cursor)
            top = rect.top()
            block_number += 1

    def sizeHint(self):
        return QSize(self.editor.line_number_area_width(), 0)




def merge_configs_with_duplicates(config_path, meta_path):
    """–°–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ —Å –ø–æ–∫–∞–∑–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (–¥—É–±–ª–∏ –∫–ª—é—á–µ–π —Ä—è–¥–æ–º, –∫—Ä–∞—Å–∏–≤–∞—è —Å—Ç—Ä–æ–∫–∞, —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã)."""
    import json

    defCFG = json.load(open(config_path, "r", encoding="utf-8"))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é meta.json –≤ meta_backup.json
    meta_dir, meta_filename = os.path.split(meta_path)
    meta_base, _ = os.path.splitext(meta_filename)
    metaTMP_path = os.path.join(meta_dir, meta_base + "_backup.json")
    shutil.copyfile(meta_path, metaTMP_path)

    meta = json.load(open(meta_path, "r", encoding="utf-8"))
    metaCFG = meta.get("config", {})

    def format_value(val, indent=2):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º –∏ ensure_ascii=False
        return json.dumps(val, ensure_ascii=False, indent=None, separators=(",", ": "))

    def merge_dict(def_dict, meta_dict, level=1):
        lines = []
        indent = "    " * level
        for key in def_dict:
            def_val = def_dict[key]
            if meta_dict: 
                meta_val = meta_dict.get(key, None)
            else:
                meta_val = def_val
            key_str = json.dumps(key, ensure_ascii=False)
            # –ï—Å–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è - dict, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
            if isinstance(def_val, dict) and isinstance(meta_val, dict):
                merged = merge_dict(def_val, meta_val, level+1)
                lines.append(f'{indent}{key_str}: {merged},')
            # –ï—Å–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –∏ meta_val —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            elif meta_val is not None and meta_val != def_val:
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ
                lines.append(f'{indent}{key_str}: {format_value(meta_val)},')
                # –ü–æ—Ç–æ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
                lines.append(f'{indent}{key_str}: {format_value(def_val)},')
            else:
                lines.append(f'{indent}{key_str}: {format_value(def_val)},')
        # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø—è—Ç—É—é
        if lines and lines[-1].endswith(','):
            lines[-1] = lines[-1][:-1]
        return '{' + '\r\n' + '\r\n'.join(lines) + '\r\n' + ("    " * (level-1)) + '}'

    
    result = merge_dict(defCFG, metaCFG)
    return result



class JsonHighlighter(QSyntaxHighlighter):
    def __init__(self, document, editor=None):
        super().__init__(document)
        self.editor = editor
        self.selected_text = ""
        self.rules = []

        theme = "dark" if theme_night else "light"
        
        # –ß–∏—Å–ª–∞
        number_format = self.format(QColor(colorsHL[theme]["number"]))
        self.rules.append((QRegularExpression(r'(?<=[^#])\b(\d+(\.\d+)?)\b'), number_format))

        # –ë—É–ª–µ–≤—ã –∏ null
        const_format = self.format(QColor(colorsHL[theme]["const"]), italic=True)
        self.rules.append((QRegularExpression(r'\b(true|false|null)\b'), const_format))

        # –°–∫–æ–±–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ
        brace_format = self.format(QColor(colorsHL[theme]["brace"]))
        for symbol in r'()\,.:':
            self.rules.append((QRegularExpression(rf'(\{symbol})'), brace_format))

        brace1_format = self.format(QColor(colorsHL[theme]["brace1"]))
        for symbol in r'.;':
            self.rules.append((QRegularExpression(rf'(\{symbol})'), brace1_format))

        brace2_format = self.format(QColor(colorsHL[theme]["brace2"]), bold=True)    
        for symbol in r'{}':
            self.rules.append((QRegularExpression(rf'(\{symbol})'), brace2_format))
        brace3_format = self.format(QColor(colorsHL[theme]["brace3"]), bold=True)    
        for symbol in r'[]':
            self.rules.append((QRegularExpression(rf'(\{symbol})'), brace3_format))
        brace4_format = self.format(QColor(colorsHL[theme]["brace4"]), bold=True)    
        for symbol in r'()':
            self.rules.append((QRegularExpression(rf'(\{symbol})'), brace4_format))

        # –°—Ç—Ä–æ–∫–∏: "–∑–Ω–∞—á–µ–Ω–∏–µ"
        string_format = self.format(QColor(colorsHL[theme]["string"]))
        self.rules.append((QRegularExpression(r'("([^"\\]|\\.)*")'), string_format))

        # –ö–ª—é—á–∏: "–∫–ª—é—á"
        key_format = self.format(QColor(colorsHL[theme]["key"]), bold=True)
        self.rules.append((QRegularExpression(r'("([^"\\]|\\.)*")\s*:'), key_format))      

        # –ö–ª—é—á–∏: {
        key1_format = self.format(QColor(colorsHL[theme]["key1"]), bold=True)
        self.rules.append((QRegularExpression(r'("([^"\\]|\\.)*")\s*:\s*\{'), key1_format))       

        # –ö–ª—é—á–∏ ?: "–∫–ª—é—á"
        key2_format = self.format(QColor(colorsHL[theme]["key2"]))
        self.rules.append((QRegularExpression(r'("([^"\\]|\\.)* \?"\s*:)'), key2_format))  
        self.rules.append((QRegularExpression(r'( \?"\s*:\s*"([^"\\]|\\.)*")'), key2_format))  

        

    def line_number_area_width(self, edit_area):
        digits = len(str(max(1, edit_area.document().blockCount())))
        space = 3 + edit_area.fontMetrics().horizontalAdvance('9') * digits
        return space + 10

    def update_line_number_area_width(self, edit_area):
        edit_area.setViewportMargins(edit_area.line_number_area_width(), 0, 0, 0)        
        edit_area.line_number_area.update()

    def eventFilter(self, obj, event):        
        if event.type() == QEvent_Resize:
            cr = obj.contentsRect()
            obj.line_number_area.setGeometry(
                QRect(cr.left(), cr.top(), obj.line_number_area_width(), cr.height())
            )
            obj.line_number_area.update()
        elif event.type() == QEvent_WindowActivate: 
            cr = obj.contentsRect()
            obj.line_number_area.setGeometry(
                QRect(cr.left(), cr.top(), obj.line_number_area_width(), cr.height())
            )
            obj.line_number_area.update()            
            QTimer.singleShot(0, lambda: self.update_line_number_area_width(obj))
        return False  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ False, —á—Ç–æ–±—ã —Å–æ–±—ã—Ç–∏–µ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–æ—Å—å
    
    def enhance_text_edit(self, edit_area):                  
        edit_area.setStyleSheet("""
                font-family: Consolas;
                font-size: 10pt;
                selection-background-color: #264f78;
                selection-color: #ffffff00;
        """)                               
        edit_area.line_number_area = LineNumberArea(edit_area)                
        edit_area.line_number_area_width = lambda: self.line_number_area_width(edit_area)              
        edit_area.textChanged.connect(lambda: self.update_line_number_area_width(edit_area))
        edit_area.verticalScrollBar().valueChanged.connect(lambda: edit_area.line_number_area.update())                        
        # self.update_line_number_area_width(edit_area)            
        edit_area.installEventFilter(self)
        edit_area.line_number_area.show()  
        edit_area.line_number_area.raise_()
        # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
        QTimer.singleShot(0, lambda: self.update_line_number_area_width(edit_area))



    def setSelectedText(self, text):
            self.selected_text = text    
        
    def format(self, color_hex, bold=False, italic=False, color_back=None):
        fmt = QTextCharFormat()
        fmt.setForeground(QColor(color_hex))
        if not color_back == None:
            fmt.setBackground(QColor(color_back))
        if bold:
            fmt.setFontWeight(QFont.Weight.Bold)
        if italic:
            fmt.setFontItalic(True)
        return fmt

    def highlightBlock(self, text):                  

        for pattern, fmt in self.rules:
            match_iter = pattern.globalMatch(text)
            while match_iter.hasNext():
                match = match_iter.next()
                if match.lastCapturedIndex() >= 1:
                    # –ï—Å—Ç—å –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞)
                    start = match.capturedStart(1)
                    length = match.capturedLength(1)
                    self.setFormat(start, length, fmt)

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ —Å —Ü–≤–µ—Ç–∞–º–∏
        color_regex = QRegularExpression(r'"([#a-zA-Z0-9]{3,20})"')
        color_iter = color_regex.globalMatch(text)
        while color_iter.hasNext():
            match = color_iter.next()
            color_code = match.captured(1)
            qcolor = QColor(color_code)

            if not qcolor.isValid():
                continue

            fmt = QTextCharFormat()
            fmt.setBackground(qcolor)

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –±–µ–ª—ã–π/—á—ë—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —è—Ä–∫–æ—Å—Ç–∏
            if qcolor.lightness() < 128:
                fmt.setForeground(Qt.GlobalColor.white)
            else:
                fmt.setForeground(Qt.GlobalColor.black)

            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫)
            self.setFormat(match.capturedStart(1), match.capturedLength(1), fmt)

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if self.selected_text and len(self.selected_text) >= 1 and len(self.selected_text) < 1024:
            fmt = QTextCharFormat()
            if theme_night:
                fmt.setBackground(QColor("#5e5e30"))
                fmt.setForeground(QColor("black"))
            else:
                fmt.setBackground(QColor("#cfcf6d"))
                fmt.setForeground(QColor("black"))

            pattern = QRegularExpression(re.escape(self.selected_text))
            match_iter = pattern.globalMatch(text)
            while match_iter.hasNext():
                match = match_iter.next()
                start = match.capturedStart()
                length = match.capturedLength()
                self.setFormat(start, length, fmt)
            # –æ—Å–æ–±–æ –¥–ª—è –ø–∞—Ä–Ω—ã—Ö
            if len(self.selected_text) == 1:
                strp1 = "{[(<}])>"
                strp2 = "}])>{[(<"
                findp = strp1.find(self.selected_text)
                if findp >= 0:              
                    fmt = QTextCharFormat()
                    if theme_night:
                        fmt.setBackground(QColor("#cfcf6d"))
                        fmt.setForeground(QColor("#e80af7"))
                    else:
                        fmt.setBackground(QColor("#cfcf6d"))
                        fmt.setForeground(QColor("#e80af7"))

                    pattern = QRegularExpression(re.escape( strp2[findp] ))
                    match_iter = pattern.globalMatch(text)
                    while match_iter.hasNext():
                        match = match_iter.next()
                        start = match.capturedStart()
                        length = match.capturedLength()
                        self.setFormat(start, length, fmt)


        # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–∞ "A" (–∏–ª–∏ –ª—é–±–æ–≥–æ –∫–ª—é—á–∞)
        key_regex = QRegularExpression(r'^\s*"([^"]+)"\s*:')
        match = key_regex.match(text)
        key = match.captured(1) if match.hasMatch() else None        

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞ (–µ—Å–ª–∏ –±—ã–ª)
        prev_key = self.previousBlockState()       

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –≤ state (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ hash –∏–ª–∏ id)
        if key:
            cur_key = hash(key) & 0x0FFFFFFF # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ state –¥–æ 32 –±–∏—Ç
            if prev_key != 0 and cur_key == prev_key:                
                start = match.capturedStart(1)
                length = match.capturedLength(1)
                fmt = QTextCharFormat()
                fmt.setBackground(QColor("#ff5555"))
                self.setFormat(start, length, fmt)             
            self.setCurrentBlockState( cur_key )
        else:
            self.setCurrentBlockState( 0 )        
    


def patch_config_editor(dialog: QDialog):
    """–∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–∞ """
    try:        
        highlighter = JsonHighlighter(dialog.form.editor.document(), editor=dialog.form.editor)
        dialog.form.editor.highlighter = highlighter
        highlighter.enhance_text_edit(dialog.form.editor)

        # # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à—Ä–∏—Ñ—Ç
        # font = QFont("Consolas", 8)
        # dialog.form.editor.setFont(font)
        # dialog.form.editor.setStyleSheet("""
        #     QTextEdit {
        #         font-family: Consolas;
        #         font-size: 9pt;
        #     }
        # """)
       
        # font-family: Consolas;
        # dialog.form.editor.setStyleSheet(""" 
        #     QTextEdit {                
        #         font-family: Consolas;
        #         font-size: 9pt;
        #         background-color: #1f1f1f;
        #         color: d4d4d4;
        #         selection-background-color: #264f78;
        #         selection-color: #ffffff00;
        #     }
        # """)

        # —Ç–∞–±—É–ª—è—Ü–∏—è 4 —Å–∏–º–≤–æ–ª–∞
        dialog.form.editor.setTabStopDistance(dialog.form.editor.fontMetrics().horizontalAdvance('0000')) 

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
        def on_cursor_changed():
            text = dialog.form.editor.textCursor().selectedText()
            highlighter.setSelectedText(text)
            highlighter.rehighlight()
        dialog.form.editor.cursorPositionChanged.connect(on_cursor_changed)
        
        setup_context_menu_json(dialog.form.editor, dialog) # —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
        dialog.btn_find_prev = QPushButton(" ‚Üê ")
        msg = localizationF("Search_previous_repl", "Search for previous replacement")
        dialog.btn_find_prev.setToolTip( msg )
        dialog.btn_find_prev.setDefault(False)
        dialog.btn_find_next = QPushButton(" ‚Üí ")
        msg = localizationF("Search_next_repl", "Searching for the next replacement")
        dialog.btn_find_next.setToolTip( msg )
        dialog.btn_find_next.setDefault(False)
        # –ø–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        restore = dialog.form.buttonBox.button(QDialogButtonBox.StandardButton.RestoreDefaults)
        layout = dialog.form.buttonBox.layout()
        restore_index = None
        for i in range(layout.count()):
            item = layout.itemAt(i)
            widget = item.widget()
            if widget is restore:
                restore_index = i
                break
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ö –ø–æ—Å–ª–µ 
        layout.insertWidget(restore_index + 1, dialog.btn_find_prev)
        layout.insertWidget(restore_index + 2, dialog.btn_find_next)

        status_label = QLabel()
        dialog.status_label = status_label
        status_label.setStyleSheet("font-size: 10pt; color: #777; padding: 2px;")
        layout.insertWidget(restore_index + 3, dialog.status_label)
        msg = localizationF("status_label", "Total replacements")
        status = f"{msg}" +": 0"        
        dialog.status_label.setText(status)
        msg = localizationF("status_label_ToolTip", "The last line will be saved")
        dialog.status_label.setToolTip( msg )

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã–≤–∞–µ–º
        dialog.btn_find_prev.setVisible(False)
        dialog.btn_find_next.setVisible(False)
        dialog.status_label.setVisible(False)

        def get_key_from_line(line):
            if ':' not in line:
                return None
            return line.split(':', 1)[0].strip().strip('"')
        

        def on_find_next_prev(direction = QTextCursor_NextBlock):
            """–ø–æ–∏—Å–∫ –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ–Ω–µ–Ω—ã –±—É–¥—É—Ç"""
            editor = dialog.form.editor
            text = editor.toPlainText()

            # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞
            cursor = editor.textCursor()            
            curBN = cursor.block().blockNumber()
            cursor.movePosition(QTextCursor_StartOfBlock)
            cur_start = cursor.position()
            cursor.movePosition(QTextCursor_EndOfBlock)
            cur_end = cursor.position()

            cursor.setPosition( cur_start )
            cursor.setPosition( cur_end, QTextCursor_KeepAnchor )          

            cur_line = cursor.selectedText() 
            str_last = get_key_from_line(cur_line) 

            MaxN = 100000
            while True:
                # –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –≤ –Ω–∞—á–∞–ª–æ              
                if not cursor.movePosition( direction ):
                    notfound = localizationF("notfound", "Not found")
                    tooltip(f"<p style='color: yellow; background-color: black'>{notfound}</p>", parent=dialog)                    
                    return
                next_start = cursor.position() 
                cursor.movePosition(QTextCursor_EndOfBlock)
                next_end = cursor.position()
                cursor.setPosition( next_start )
                cursor.setPosition( next_end, QTextCursor_KeepAnchor )          
                next_line = cursor.selectedText() 
                str_next = get_key_from_line(next_line) 

                nexBN = cursor.block().blockNumber()
                
                if str_next and str_last and str_next == str_last and abs(curBN-nexBN) > 1:
                    # –°—Ç–∞–≤–∏–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
                    colon_pos = next_line.find(':')
                    if colon_pos != -1:
                        abs_pos = next_start + colon_pos + 1
                        tc = editor.textCursor()
                        tc.setPosition(abs_pos)
                        editor.setTextCursor(tc)
                        editor.centerCursor()
                        return
                else:
                    # –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫
                    cur_start = next_start
                    cur_end = next_end 
                    cur_line = next_line
                    str_last = str_next

                MaxN -= 1
                if MaxN <= 0:
                    return
                

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏        
        dialog.btn_find_prev.clicked.connect(lambda: on_find_next_prev(QTextCursor_PreviousBlock))
        dialog.btn_find_next.clicked.connect(lambda: on_find_next_prev(QTextCursor_NextBlock))        


        def custom_onRestoreDefaults(self):
            # default_conf = self.mgr.addonConfigDefaults(self.addon)       
            addon_dir = Path(mw.addonManager.addonsFolder()) / current_dialog.mgr.addonsFolder(self.addon)
            config_path = addon_dir / "config.json"
            meta_path = addon_dir / "meta.json"
            newCFG = merge_configs_with_duplicates(config_path, meta_path)            
            text = gui_hooks.addon_config_editor_will_display_json( newCFG )
            self.form.editor.setPlainText(text)
            if is_mac:
                self.form.editor.repaint()
            # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
            self.form.editor.highlighter.rehighlight()    
            
            n = 0
            text = self.form.editor.toPlainText()
            pattern = r'"([^"]+)"\s*:'
            matches = list(re.finditer(pattern, text))
            # –ü–æ–∏—Å–∫ –¥—É–±–ª–µ–π –ø–æ–¥—Ä—è–¥
            for i in range(1, len(matches)):
                if matches[i].group(1) == matches[i-1].group(1):
                    n += 1
            if n > 0:
                self.btn_find_prev.setVisible(True)
                self.btn_find_next.setVisible(True)
                self.status_label.setVisible(True)
                msg = localizationF("status_label", "Total replacements")
                status = f"{msg}: {n}"
                self.status_label.setText(status)
            else:
                self.btn_find_prev.setVisible(False)
                self.btn_find_next.setVisible(False)
                self.status_label.setVisible(False)    
            cursor =  self.form.editor.textCursor()
            cursor.setPosition(0)
            self.form.editor.setTextCursor(cursor)

            tooltip(tr.addons_restored_defaults(), parent=self)

        # –∏–∑–º–µ–Ω–∏–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–Ω—Ñ–∏–≥–∞
        restore = dialog.form.buttonBox.button(
            QDialogButtonBox.StandardButton.RestoreDefaults
        )        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É dialog
        dialog.onRestoreDefaults = MethodType(custom_onRestoreDefaults, dialog)  
        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª
        restore.clicked.disconnect()                     
        qconnect(restore.clicked, dialog.onRestoreDefaults)
             
     

    except Exception as e:
        print(f"[json_highlighter] Error: {e}") 


def intercept_on_config(dialog: AddonsDialog):  
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""  
    original_on_config = dialog.onConfig

    def custom_on_config():        
        addon = dialog.onlyOneSelected()
        if not addon:
            return

        act = dialog.mgr.configAction(addon)
        if act and act() is not False:
            return

        conf = dialog.mgr.getConfig(addon)
        if conf is None:
            showInfo(tr.addons_addon_has_no_configuration())
            return

        editor = aqt.addons.ConfigEditor(dialog, addon, conf)
        patch_config_editor(editor)
       

    dialog.onConfig = custom_on_config

    # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫
    try:
        dialog.form.config.clicked.disconnect()
    except Exception:
        pass
    dialog.form.config.clicked.connect(custom_on_config)

    try:
        dialog.form.addonList.itemDoubleClicked.disconnect()
    except Exception:
        pass
    dialog.form.addonList.itemDoubleClicked.connect(custom_on_config)





addons_dialog_will_show.append(intercept_on_config)



findStrJson = "" # –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å
def findF3Json(editor, dialog):    
    """–î–ª—è JSON –ø–æ–∏—Å–∫ –≤–ø–µ—Ä–µ–¥ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ —Ä–∞–Ω–µ–µ –∑–∞–ø–æ–º–Ω–µ–Ω–Ω–æ–π"""
    global findStrJson
    if not findStrJson:
        return
    
    cursor = editor.textCursor()
    document = editor.document()
    # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–Ω—Ü–∞
    found_cursor = document.find(findStrJson,  cursor.selectionEnd() )

    if found_cursor.isNull():
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å –Ω–∞—á–∞–ª–∞
        notfound = localizationF("notfound", "Not found")
        tooltip(f"<p style='color: yellow; background-color: black'>{notfound}. ‚èÆÔ∏è</p>", parent=dialog)
        found_cursor = document.find(findStrJson, 0)

    if not found_cursor.isNull():
        editor.setTextCursor(found_cursor)
        editor.centerCursor()
    else:
        notfound = localizationF("notfound", "Not found")
        tooltip(f"<p style='color: yellow; background-color: black'>{notfound}</p>", parent=dialog)


def findShiftF3Json(editor, dialog):    
    """–î–ª—è JSON –ø–æ–∏—Å–∫ –Ω–∞–∑–∞–¥ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ —Ä–∞–Ω–µ–µ –∑–∞–ø–æ–º–Ω–µ–Ω–Ω–æ–π"""
    global findStrJson
    if not findStrJson:
        return
        
    
    cursor = editor.textCursor()
    document = editor.document()
    start_pos = cursor.selectionStart()

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ ‚Äî —Å–Ω–∏–º–∞–µ–º –µ–≥–æ –∏ —Å—Ç–∞–≤–∏–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    if cursor.hasSelection():        
        cursor.setPosition(start_pos)
        editor.setTextCursor(cursor)        

    found_cursor = document.find(findStrJson, start_pos, QTextDocument_FindBackward)

    if not found_cursor.isNull():        
        editor.setTextCursor(found_cursor)
    else:       
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å –∫–æ–Ω—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        notfound = localizationF("notfound", "Not found")
        tooltip(f"<p style='color: yellow; background-color: black'>{notfound}. ‚è≠Ô∏è</p>", parent=dialog)
        found_cursor = document.find(findStrJson, document.characterCount() - 1, QTextDocument_FindBackward)

        if not found_cursor.isNull():
            editor.setTextCursor(found_cursor)
        else:
            tooltip(f"<p style='color: yellow; background-color: black'>{notfound}</p>", parent=dialog)

    


def findJson(editor, dialog):  
    """–î–ª—è JSON –ø–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–ø–æ–º–Ω–∏–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤ findStrJson"""     
    global findStrJson
    find = localizationF("Find", "Find a substring")
    find_t = localizationF("Find_tooltip", "Enter a substring")
    user_find = ask_user_for_text(dialog, find, find_t, findStrJson) # –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫–∏ 
    if user_find is None or not user_find.strip():
        return
    findStrJson = user_find
    findF3Json(editor, dialog)   



# —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ JSON
def setup_context_menu_json(editor, dialog):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è."""
    def show_context_menu_json(position):
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
        menu = editor.createStandardContextMenu()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
        menu.addSeparator()   

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–∏—Å–∫–∞ 
        find_action = QAction(localizationF("Find","Find a substring")+"...", menu)
        find_action.setToolTip(localizationF("Find_tooltip","Enter a substring"))
        find_action.setShortcut("Ctrl+F")
        find_action.triggered.connect(lambda: findJson(editor, dialog))
        menu.addAction(find_action)
        dialog.addAction(find_action)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–∏—Å–∫–∞ F3 
        findF3_action = QAction(localizationF("FindF3","Search next"), menu)
        findF3_action.setToolTip(localizationF("FindF3_tooltip","Repeat search for substring"))
        findF3_action.setShortcut("F3")
        findF3_action.triggered.connect(lambda: findF3Json(editor, dialog))
        menu.addAction(findF3_action)
        dialog.addAction(findF3_action)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–∏—Å–∫–∞ Shift+F3 
        findShiftF3_action = QAction(localizationF("FindShiftF3","üîç‚¨ÜÔ∏è Search Previous"), menu)        
        findShiftF3_action.setShortcut("Shift+F3")
        findShiftF3_action.triggered.connect(lambda: findShiftF3Json(editor, dialog))
        menu.addAction(findShiftF3_action)
        dialog.addAction(findShiftF3_action)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        menu.exec(editor.viewport().mapToGlobal(position))

    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    editor.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
    editor.customContextMenuRequested.connect(show_context_menu_json)
    QShortcut(QKeySequence("Ctrl+F"), editor, lambda: findJson(editor, dialog))
    QShortcut(QKeySequence("F3"), editor, lambda: findF3Json(editor, dialog))
    QShortcut(QKeySequence("Shift+F3"), editor, lambda: findShiftF3Json(editor, dialog))    
    

# ============================================================================= 




class ColorfulDelegate(QStyledItemDelegate):
    def paint(self, painter: QPainter, option, index):
        text = index.data(Qt.ItemDataRole.DisplayRole)
        text_color_brush = index.data(Qt.ItemDataRole.ForegroundRole)

        if theme_night: # —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None, –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if text_color_brush is None:
                text_color = QColor("#f5f9fc")
            else:
                text_color = text_color_brush.color()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç –∏–∑ QBrush
            
            # –ï—Å–ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –¥–µ–ª–∞–µ–º —Ñ–æ–Ω —Å–≤–æ–π
            if option.state & QStyle.StateFlag.State_Selected:
                painter.fillRect(option.rect, QColor("#323e4d"))
            else:
                painter.fillRect(option.rect, QColor("#252525"))  # –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None, –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if text_color_brush is None:
                text_color = QColor("#020202")
            else:
                text_color = text_color_brush.color()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç –∏–∑ QBrush

            # –ï—Å–ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –¥–µ–ª–∞–µ–º —Ñ–æ–Ω —Å–≤–æ–π
            if option.state & QStyle.StateFlag.State_Selected:
                painter.fillRect(option.rect, QColor("#dae5ff"))
            else:
                painter.fillRect(option.rect, QColor("#ffffff"))  # –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω
             
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        painter.setPen(text_color)
        painter.drawText(option.rect.adjusted(5, 0, -5, 0), Qt.AlignmentFlag.AlignVCenter, text)

    def sizeHint(self, option, index): # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç –ø–æ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤—ã—Å–æ—Ç—É      
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if pyqt_version == "PyQt6":
            # –î–ª—è PyQt6 –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ fontMetrics
            font_metrics = option.fontMetrics
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            row_height = font_metrics.boundingRect(index.data(Qt.ItemDataRole.DisplayRole)).height()
        else:
            # –î–ª—è PyQt5 —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ fontMetrics
            font_metrics = option.fontMetrics
            row_height = font_metrics.boundingRect(index.data(Qt.DisplayRole)).height()  
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º QSize —Å —à–∏—Ä–∏–Ω–æ–π –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
        return QSize(option.rect.width(), row_height + 0)  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø, –Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –ø–∏–∫—Å–µ–ª–µ–π
    

def safe_split_N(s: str, sep: str, n: int, first_missed: bool = False) -> list[str]:
    """—Ä–∞–∑–±–∏—Ç—å —Å—Ç—Ä–æ–∫—É s –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é sep —Å—Ç—Ä–æ–≥–æ –Ω–∞ n –ø–æ–¥—Å—Ç—Ä–æ–∫ (first_missed –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–æ)"""
    if not sep or n < 1:
        return [""] * n
    parts = s.split(sep, n - 1)
    len__parts = len(parts) 
    if len__parts < n:
        if first_missed:
            return ([""] * (n-len__parts) + parts)
        else:
            return (parts + [""] * (n-len__parts))            
    else:
        return parts 

    
    



def custom_redrawAddons(self):  
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è AddonsDialog.redrawAddons (–∏–∑ anki-main\qt\aqt\addons.py) """

    CurrentAddonPrev = CurrentAddon.copy() # —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞–∫–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è    

    selected = set(self.selectedAddons())

    original_redraw(self) # –Ω–∞–¥–æ –≤—ã–∑–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª, –≤–¥—Ä—É–≥ —Ç–∞–º –∫–∞–∫–æ–π-—Ç–æ –∫–æ–¥ –ø–æ–º–µ–Ω—è–ª–∏ –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    
    addonList = self.form.addonList
    mgr = self.mgr
    self.addons = list(mgr.all_addon_meta())   

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ meta.json –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–¥–æ–Ω–∞
    for addon in self.addons:
        meta_path = os.path.join(mgr.addonsFolder(), addon.dir_name, "meta.json")
        manifest_path = os.path.join(mgr.addonsFolder(), addon.dir_name, "manifest.json")

        if not hasattr(addon, "provided_name") or addon.provided_name is None:
            addon.provided_name = "" # —Å–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç

        user_hint = ""
        mark_color = "#000000"
        mod_timestamp_upd = 0
        auto_update = True
        version = ""

        addon_manager = mw.addonManager
        addons_list = self.form.addonList

        if os.path.exists(meta_path):
            try:
                with open(meta_path, "r", encoding="utf-8") as f:
                    meta_data = json.load(f)

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è "hint"
                user_hint = meta_data.get("hint", "")
                if "hint" not in meta_data:
                    meta_data["hint"] = user_hint

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è "mark_color"
                mark_color = meta_data.get("mark_color", "#000000")
                if "mark_color" not in meta_data:
                    meta_data["mark_color"] = mark_color

                # üëâ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                original_mtime = os.path.getmtime(meta_path)

                # ‚úçÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ meta.json
                with open(meta_path, "w", encoding="utf-8") as f:
                    json.dump(meta_data, f, ensure_ascii=False, indent=4)

                # üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                os.utime(meta_path, (original_mtime, original_mtime))  # (atime, mtime)

                if os.path.exists(manifest_path):
                    with open(manifest_path, "r", encoding="utf-8") as f:
                        manifest_data = json.load(f)
                    mod_timestamp_upd = manifest_data.get("mod", 0)

            except Exception as e:
                showText(f"Error while processing {meta_path}:\n{traceback.format_exc()}")
        else:
            showText(f"Meta.json file not found for addon {addon.dir_name}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è  
        min_point_version = str(meta_data.get("min_point_version", "-"))
        max_point_version = str(meta_data.get("max_point_version", "-"))
        version = meta_data.get("human_version", "")  
        if version.strip() != "":
            version += " "        
        version += f" anki [{min_point_version}...{max_point_version}]"
        auto_update = meta_data.get("update_enabled", True) 
        mod_timestamp = meta_data.get("mod", 0)
        creation_time = datetime.fromtimestamp(mod_timestamp).strftime('%Y-%m-%d %H:%M') if meta_data.get("mod") else "Unknown"
        creation_time_YYYY_MM = datetime.fromtimestamp(mod_timestamp).strftime('%Y-%m') if mod_timestamp else "Unknown"
        update_time = ""
        if mod_timestamp_upd > 0:
            update_time = datetime.fromtimestamp(mod_timestamp_upd).strftime('%Y-%m-%d %H:%M')
        modification_time = datetime.fromtimestamp(os.path.getmtime(meta_path)).strftime('%Y-%m-%d %H:%M')
        loc_cr = localizationF("Created", "Created")
        loc_md = localizationF("Modified", "Modified")
        date_info = f" {addon.human_name()} "
        if user_hint != "":
            date_info += "\n / " + user_hint + " / "
        loc_ver = localizationF("Version", "Version")        
        date_info += f"\n {loc_ver}: {version} "
        if mod_timestamp_upd > 0:
             loc_upd = localizationF("Updated", "Updated")
             date_info += f"\n {update_time} - {loc_upd} "
        date_info += f"\n {creation_time} - {loc_cr} "
        date_info += f"\n {modification_time} - {loc_md} "         
        loc_enupd = localizationF("Auto_update", "Auto update") 
        loc_true = localizationF("Yes", "Yes")
        loc_false = localizationF("No", "No")
        strNoUpd = ""
        if auto_update:            
            date_info += f"\n {loc_enupd}: {loc_true}"            
        else:
            date_info += f"\n {loc_enupd}: {loc_false}"
            strNoUpd = localizationF("update_enabled_False", " (!auto) ")
        date_info += f"\n id: {addon.dir_name} "

        # –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–º —Å–∏–º–≤–æ–ª–æ–≤ –∏–¥–µ—Ç # –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –¥–æ –∏–º–µ–Ω–∏ –∏ —Å–ª–µ–¥—É—é—â–µ–µ # - –ø–æ—Å–ª–µ
        if len(user_hint) > 0 and user_hint[0] == "#":
            user_hintS = safe_split_N(user_hint, "#", 3)
            user_hint1 = user_hintS[1]
            user_hint2 = user_hintS[2]            
            if user_hint1.strip() != "":
                user_hint1 += " "  
            if user_hint2.strip() != "":
                user_hint2 = " " + user_hint2 
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            if current_sort_flag == 0:                
                addon.provided_name = user_hint1 + addon.provided_name + user_hint2 + strNoUpd
            elif current_sort_flag == 1:
                addon.provided_name = f"{creation_time_YYYY_MM}   {modification_time}     {user_hint1}{addon.human_name()}{user_hint2}   {addon.dir_name}{strNoUpd}"                    
            elif current_sort_flag == 2:
                addon.provided_name = f"{modification_time}   {creation_time_YYYY_MM}     {user_hint1}{addon.human_name()}{user_hint2}   {addon.dir_name}{strNoUpd}"                
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            if current_sort_flag == 0:
                addon.provided_name += strNoUpd                        
            elif current_sort_flag == 1:
                addon.provided_name = f"{creation_time_YYYY_MM}   {modification_time}     {addon.human_name()}{strNoUpd}   {addon.dir_name}{strNoUpd}"
            elif current_sort_flag == 2:
                addon.provided_name = f"{modification_time}   {creation_time_YYYY_MM}     {addon.human_name()}{strNoUpd}   {addon.dir_name}{strNoUpd}"
                
            if user_hint != "":
                    addon.provided_name += "   / " + user_hint + " /" + strNoUpd 

              
        addon.date_info = date_info
        addon.user_hint = user_hint
        addon.mark_color = mark_color  

    # —ç—Ç–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ def redrawAddons –∏–∑ addons.py 
    reverseSort = not current_sort_flag == 0
    self.addons.sort(key=lambda a: a.human_name().lower(), reverse=reverseSort)
    self.addons.sort(key=self.should_grey)    
        
    addonList.clear()
        
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–µ–ª–µ–≥–∞—Ç
    delegate = ColorfulDelegate(addonList)
    addonList.setItemDelegate(delegate)

    i = 0
    for addon in self.addons:
        name = self.name_for_addon_list(addon)
        item = QListWidgetItem(name, addonList)
        if not hasattr(addon, "date_info") or addon.date_info is None:
            addon.date_info = "" # —Å–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç
        item.setToolTip(addon.date_info)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É                   
        
        if not hasattr(addon, "mark_color") or addon.mark_color is None:
            addon.mark_color = "#000000" # —Å–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç

        if addon.mark_color not in ("#000000", "#ffffff", "#FFFFFF", ""): # —Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ –±–µ–ª—ã–π –∏ –Ω–µ —á–µ—Ä–Ω—ã–π                    
            item.setForeground(QColor(addon.mark_color))
        else:
            if self.should_grey(addon):
                item.setForeground(Qt.GlobalColor.gray) 
                       

        if addon.dir_name in selected:            
            item.setSelected(True) 
    

    #addonList.reset() # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ

    #QTimer.singleShot(100, lambda:setCurrentItem(self, CurrentAddonPrev)) 
     
         

# –ü–æ–¥–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ redrawAddons
AddonsDialog.redrawAddons = custom_redrawAddons



def custom_onGetAddons(self):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è AddonsDialog.onGetAddons (–∏–∑ anki-main\qt\aqt\addons.py) """
    obj = GetAddons(self)
    if obj.ids:
        findOldAddons = False
        for addon in self.addons:
            if addon.dir_name.isdigit() and int(addon.dir_name) in obj.ids:
                findOldAddons = True
                break
        
        if findOldAddons:
            if askUser(localizationF("download_addons","Attention! There is already one of the add-ons in the list. Should we replace it?")):
                download_addons(self, self.mgr, obj.ids, self.after_downloading, force_enable=True)
        else:
            download_addons(self, self.mgr, obj.ids, self.after_downloading, force_enable=True)


# –ü–æ–¥–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ onGetAddons
AddonsDialog.onGetAddons = custom_onGetAddons


# —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é
def setup_context_menu(addons_list, dialog):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π."""
    def show_context_menu(position):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        menu.exec(addons_list.viewport().mapToGlobal(position))


    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    menu = QMenu(addons_list)        

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    hint_action = QAction(localizationF("Hint","Hint")+"...", menu)
    hint_action.setToolTip(localizationF("Hint_tooltip", "Enter brief information that is understandable to you"))
    hint_action.setShortcut("F2")
    hint_action.triggered.connect(lambda: hint_item_list(addons_list, dialog))
    menu.addAction(hint_action)
    dialog.addAction(hint_action)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–∏—Å–∫–∞ 
    find_action = QAction(localizationF("Find","Find a substring")+"...", menu)
    find_action.setToolTip(localizationF("Find_tooltip","Enter a substring"))
    find_action.setShortcut("Ctrl+F")
    find_action.triggered.connect(lambda: find(addons_list, dialog))
    menu.addAction(find_action)
    dialog.addAction(find_action)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–∏—Å–∫–∞ F3 
    findF3_action = QAction(localizationF("FindF3","Search next"), menu)
    findF3_action.setToolTip(localizationF("FindF3_tooltip","Repeat search for substring"))
    findF3_action.setShortcut("F3")
    findF3_action.triggered.connect(lambda: findF3(addons_list, dialog))
    menu.addAction(findF3_action)
    dialog.addAction(findF3_action)


    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —Ü–≤–µ—Ç–æ–º
    mark_color_action = QAction(localizationF("Mark","üé® Mark")+"...", menu)
    mark_color_action.setToolTip(localizationF("Mark_tooltip","Mark with color"))
    mark_color_action.setShortcut("F4")
    mark_color_action.triggered.connect(lambda: mark_item_list(addons_list, dialog))
    menu.addAction(mark_color_action)
    dialog.addAction(mark_color_action)    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort1_action = QAction(localizationF("Sort1","üîΩ Sort (created)"), menu)
    sort1_action.setToolTip(localizationF("Sort1_tooltip","Click to sort the list of add-ons by creation date (descending)"))
    sort1_action.setShortcut("F5")
    sort1_action.triggered.connect(lambda: sort1(addons_list, dialog))
    menu.addAction(sort1_action)
    dialog.addAction(sort1_action)

    sort2_action = QAction(localizationF("Sort2","üîΩ Sort (modified)"), menu)
    sort2_action.setToolTip(localizationF("Sort2_tooltip","Click to sort the list of add-ons by date modified (descending)"))
    sort2_action.setShortcut("F6")
    sort2_action.triggered.connect(lambda: sort2(addons_list, dialog))
    menu.addAction(sort2_action)  
    dialog.addAction(sort2_action)  

    # –¥–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –∫–∞–∫ —É –∫–Ω–æ–ø–∫–∏ toggleEnabled
    toggleEnabled_action = QAction(dialog.form.toggleEnabled.text(), menu)
    toggleEnabled_action.setToolTip(dialog.form.toggleEnabled.text())
    toggleEnabled_action.setShortcut("F9")
    toggleEnabled_action.triggered.connect(lambda: dialog.form.toggleEnabled.click())
    menu.addAction(toggleEnabled_action)  
    dialog.addAction(toggleEnabled_action) 

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
    menu.addSeparator()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    auto_updateYes_action = QAction(localizationF("auto_updateYes","üîÑ Auto update"), menu)
    auto_updateYes_action.setToolTip(localizationF("auto_updateYes_tooltip","All selected add-ons will be updated automatically"))   
    auto_updateYes_action.triggered.connect(lambda: set_auto_update(addons_list, dialog, True))
    menu.addAction(auto_updateYes_action)  
    dialog.addAction(auto_updateYes_action)  

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –¥–ª—è —Å–Ω—è—Ç–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    auto_updateNo_action = QAction(localizationF("auto_updateNo","üö´ No auto update"), menu)
    auto_updateNo_action.setToolTip(localizationF("auto_updateNo_tooltip","All selected add-ons will not be updated automatically."))   
    auto_updateNo_action.triggered.connect(lambda: set_auto_update(addons_list, dialog, False))
    menu.addAction(auto_updateNo_action)  
    dialog.addAction(auto_updateNo_action) 

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
    menu.addSeparator()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä id
    id_to_clb_action = QAction("id ‚Üí üìã", menu)
    id_to_clb_action.setToolTip("id ‚Üí üìã")
    id_to_clb_action.setShortcut("Ctrl+C")
    id_to_clb_action.triggered.connect(lambda: id_selected_addons_to_clipboard(addons_list, dialog))
    menu.addAction(id_to_clb_action)  
    dialog.addAction(id_to_clb_action)  

    


    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    addons_list.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
    addons_list.customContextMenuRequested.connect(show_context_menu)



findStr = "" # –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å

def findF3(addons_list, dialog):    
    global findStr
    if dialog.form.addonList.count() > 0:
        i = dialog.form.addonList.currentRow()
        i += 1
        while i < dialog.form.addonList.count():            
            item = addons_list.item(i)
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —É—Å–ª–æ–≤–∏–µ
            if findStr.lower() in item.text().lower():
                dialog.form.addonList.setCurrentRow(i)
                item = dialog.form.addonList.item(i)
                dialog.form.addonList.scrollToItem(item)  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                return
            i += 1

        # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
        notfound = localizationF("notfound","Not found") 
        tooltip(f"<p style='color: yellow; background-color: black'>{notfound}</p>", parent=dialog)


def find(addons_list, dialog):    
    if dialog.form.addonList.count() > 0:
        # –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫–∏      
        global findStr    
        find = localizationF("Find","Find a substring")  
        find_t = localizationF("Find_tooltip","Enter a substring")       
        user_find = ask_user_for_text(dialog, find, find_t, findStr)   
        if user_find == None:
            return  
        findStr = user_find   
        dialog.form.addonList.setCurrentRow(0)
        item = dialog.form.addonList.item(0)
        dialog.form.addonList.scrollToItem(item)  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
        dialog.form.addonList.setCurrentRow(-1)
        findF3(addons_list, dialog)   




def sort1(addons_list, dialog):
    """—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)"""
    global current_sort_flag
    if current_sort_flag == 1:
        current_sort_flag = 0
    else:
        current_sort_flag = 1
    custom_redrawAddons(dialog)


def sort2(addons_list, dialog):
    """—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)""" 
    global current_sort_flag
    if current_sort_flag == 2:
        current_sort_flag = 0
    else:
        current_sort_flag = 2 
    custom_redrawAddons(dialog)


def mark_item_list(addons_list, dialog):
    """–ü–æ–º–µ—Ç–∏—Ç—å —Ü–≤–µ—Ç–æ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π."""
    addon_manager = mw.addonManager

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    selected_items = addons_list.selectedItems()
    if not selected_items:
        QMessageBox.warning(dialog, localizationF("Warning","Warning"), localizationF("SelectedItems","Please select one or more (+Shift +Ctrl) lines to mark."))
        return
  

    open1 = False
    for selected_item in selected_items:
        addon_name = selected_item.text()

        # –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        addon = next((a for a in dialog.addons if a.human_name() in addon_name), None)
        if not addon:
            continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

        if not open1:
            open1 = True
            # –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
            colorCur = QColor("#ffffff")
            if not hasattr(addon, "mark_color") or addon.mark_color is None:
                addon.mark_color = "#000000" # —Å–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç

            try:
                colorCur = QColor(addon.mark_color)
            except Exception as e: pass
            color = QColorDialog.getColor(colorCur, dialog, localizationF("SelectedColor","Select a color"))
            if not color.isValid():
                return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–≤–µ—Ç –≤ HEX
            color_hex = color.name()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –≤ meta.json
        addon_path = Path(addon_manager.addonsFolder()) / addon.dir_name
        meta_file = addon_path / "meta.json"

        if meta_file.exists():
            with open(meta_file, 'r', encoding='utf-8') as f:
                meta_data = json.load(f)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç mark_color
            meta_data["mark_color"] = color_hex

            # üëâ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            original_mtime = os.path.getmtime(meta_file)

            # ‚úçÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ meta.json
            with open(meta_file, 'w', encoding='utf-8') as f:
                json.dump(meta_data, f, ensure_ascii=False, indent=4)
            
            # üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            os.utime(meta_file, (original_mtime, original_mtime))  # (atime, mtime)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        addon.mark_color = color_hex

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
        if addon.mark_color not in ("#000000", "#ffffff", "#FFFFFF", ""): # —Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ –±–µ–ª—ã–π –∏ –Ω–µ —á–µ—Ä–Ω—ã–π
            selected_item.setForeground(QColor(addon.mark_color))    

    custom_redrawAddons(dialog)





def hint_item_list(addons_list, dialog):
    """–¥–æ–±–∞–≤–∏—Ç—å hint –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–ø–∏—Å—è–º –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π."""
    addon_manager = mw.addonManager

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    selected_items = addons_list.selectedItems()
    if not selected_items:
        QMessageBox.warning(dialog, localizationF("Warning","Warning"), localizationF("SelectedItems","Please select one or more (+Shift +Ctrl) lines to mark."))
        return
  
    user_hint = ""
    open1 = False
    for selected_item in selected_items:
        addon_name = selected_item.text()

        # –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        addon = next((a for a in dialog.addons if a.human_name() in addon_name), None)
        if not addon:
            continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        
        if not open1:             
            open1 = True
            if not hasattr(addon, "user_hint") or addon.user_hint is None:
                addon.user_hint = "" # —Å–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç
            # –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ hint –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é user_hint   
            hint = localizationF("Hint","‚úçÔ∏è Hint")  
            hint_t = localizationF("Hint_tooltip","Enter brief information that is understandable to you")       
            user_hint = ask_user_for_text(dialog, hint, hint_t, addon.user_hint)   
            if user_hint == None:
                return         
            

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ meta.json
        addon_path = Path(addon_manager.addonsFolder()) / addon.dir_name
        meta_file = addon_path / "meta.json"

        if meta_file.exists():
            with open(meta_file, 'r', encoding='utf-8') as f:
                meta_data = json.load(f)

            old_hint = meta_data.get("hint", "")

            # –µ—Å–ª–∏ user_hint > 1 –∏ –≤ –Ω–∞—á–∞–ª–µ –∏–¥–µ—Ç + - ~ —Ç–æ –æ—Å–æ–±–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            if len(user_hint) > 1 and (user_hint[0]=="+" or user_hint[0]=="-" or user_hint[0]=="*"):                                               
                if len(old_hint) == 0:
                    new_user_hint = user_hint[1:]     
                elif user_hint[0]=="-":
                    del_str = user_hint[1:] 
                    new_user_hint = old_hint                    
                    if (len(del_str) > 0 and del_str[0] != "#"):
                        # –æ–±—ã—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–∑–¥–µ
                        new_user_hint = new_user_hint.replace(del_str, "")
                    else: # —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–µ —Å # –¥–æ # –ø–æ—Å–ª–µ   
                        del_strS = safe_split_N(del_str, "#", 3)
                        if old_hint[0] != "#":
                            # –µ—Å–ª–∏ –æ—Å–æ–±–∞—è –∫–æ–º–∞–Ω–¥–∞ -## —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å–ª–µ
                            if user_hint == "-##":
                                new_user_hint = ""
                            else:
                                new_user_hint = new_user_hint.replace(del_strS[2], "")
                        else:
                            
                            if user_hint == "-##": # –µ—Å–ª–∏ –æ—Å–æ–±–∞—è –∫–æ–º–∞–Ω–¥–∞ -## —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å–ª–µ
                                old_hintS = safe_split_N(old_hint, "#", 3)                            
                                new_user_hint = "#" + old_hintS[1] + "#"
                            elif user_hint == "-#": # –µ—Å–ª–∏ –æ—Å–æ–±–∞—è –∫–æ–º–∞–Ω–¥–∞ -# —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–æ
                                old_hintS = safe_split_N(old_hint, "#", 3)                            
                                new_user_hint = "##" + old_hintS[2]
                            else:
                                old_hintS = safe_split_N(old_hint, "#", 3)                            
                                new_user_hint = "#" + old_hintS[1].replace(del_strS[1], "") + "#" + old_hintS[2].replace(del_strS[2], "")
                elif user_hint[0]=="+":
                    add_str = user_hint[1:]
                    new_user_hint = old_hint
                    if len(add_str) <= 1 or (len(add_str) > 0 and add_str[0] != "#"):
                        # –æ–±—ã—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü
                        new_user_hint = new_user_hint + add_str
                    else: # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–µ —Å # –¥–æ # –ø–æ—Å–ª–µ                        
                        add_strS = safe_split_N(add_str, "#", 3)
                        if old_hint[0] != "#":
                            new_user_hint = "#" + add_strS[1] + "#" + old_hint + add_strS[2]
                        else:
                            old_hintS = safe_split_N(old_hint, "#", 3)
                            new_user_hint = "#" + add_strS[1] + old_hintS[1] + "#" + old_hintS[2] + add_strS[2]
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç hint
                meta_data["hint"] = new_user_hint # –ø–æ–¥–º–µ–Ω—è–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ
            else:
                meta_data["hint"] = user_hint # –ø–æ–ª–Ω–∞—è –ø–æ–¥–º–µ–Ω–∞
                

            # üëâ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            original_mtime = os.path.getmtime(meta_file)

            # ‚úçÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ meta.json
            with open(meta_file, 'w', encoding='utf-8') as f:
                json.dump(meta_data, f, ensure_ascii=False, indent=4)
            
            # üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            os.utime(meta_file, (original_mtime, original_mtime))  # (atime, mtime)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—ä–µ–∫—Ç–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        addon.hint = user_hint

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º hint
    custom_redrawAddons(dialog)


def ask_user_for_text(dialog, title="Brief information that you can understand", label="Enter a hint:", default_text=""):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if pyqt_version == "PyQt6":
        text, ok = QInputDialog.getText(dialog, title, label, QLineEdit.EchoMode.Normal, default_text)
    else:  # PyQt5
        text, ok = QInputDialog.getText(dialog, title, label, QLineEdit.Normal, default_text)    
    if ok:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "OK"
        return text
    return None  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "Cancel"


def set_auto_update(addons_list, dialog, update=True):
    addon_manager = mw.addonManager

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    selected_items = addons_list.selectedItems()
    if not selected_items:
        QMessageBox.warning(dialog, localizationF("Warning","Warning"), localizationF("SelectedItems","Please select one or more (+Shift +Ctrl) lines to mark."))
        return
        
    for selected_item in selected_items:
        addon_name = selected_item.text()

        # –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        addon = next((a for a in dialog.addons if a.human_name() in addon_name), None)
        if not addon:
            continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
       
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ meta.json
        addon_path = Path(addon_manager.addonsFolder()) / addon.dir_name
        meta_file = addon_path / "meta.json"

        if meta_file.exists():
            with open(meta_file, 'r', encoding='utf-8') as f:
                meta_data = json.load(f)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç "update_enabled"
            meta_data["update_enabled"] = update

            # üëâ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            original_mtime = os.path.getmtime(meta_file)

            # ‚úçÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ meta.json
            with open(meta_file, 'w', encoding='utf-8') as f:
                json.dump(meta_data, f, ensure_ascii=False, indent=4)
            
            # üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            os.utime(meta_file, (original_mtime, original_mtime))  # (atime, mtime)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—ä–µ–∫—Ç–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        addon.update_enabled = update

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏
    custom_redrawAddons(dialog)


def id_selected_addons_to_clipboard(addons_list, dialog):
    """–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    selected_items = addons_list.selectedItems()
    if not selected_items:
        QMessageBox.warning(dialog, localizationF("Warning","Warning"), localizationF("SelectedItems","Please select one or more (+Shift +Ctrl) lines to mark."))
        return

    str_id = ""

    for selected_item in selected_items:
        addon_name = selected_item.text()

        # –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        addon = next((a for a in dialog.addons if a.human_name() in addon_name), None)
        if not addon:
            continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
       
        if str_id == "":
            str_id = addon.dir_name
        else:
            str_id += " " + addon.dir_name
    
    if str_id == "":
        return
    else:
        QApplication.clipboard().setText(str_id)

        
    


def add_buttons_to_addons_dialog(dialog):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –æ–∫–Ω–æ 'Add-ons'."""
    global active_profile, current_profile, profile_list_addons, the_profile_will_change
    addons_list = dialog.form.addonList

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    sort_button1 = QPushButton(localizationF("Sort1","üîΩ Sort (created)"), dialog)
    sort_button1.setToolTip(localizationF("Sort1_tooltip","Click to sort the list of add-ons by creation date (descending)"))
    sort_button2 = QPushButton(localizationF("Sort2","üîΩ Sort (modified)"), dialog)
    sort_button2.setToolTip(localizationF("Sort2_tooltip","Click to sort the list of add-ons by date modified (descending)"))
    mark_button = QPushButton(localizationF("Mark","üé® Mark"), dialog)
    mark_button.setToolTip(localizationF("Mark_tooltip","Mark with color"))
    hint_button = QPushButton(localizationF("Hint","‚úçÔ∏è Hint"), dialog)
    hint_button.setToolTip(localizationF("Hint_tooltip","Enter brief information that is understandable to you"))
    
    layout = dialog.form.verticalLayout
    layout.insertWidget(3, sort_button1)
    layout.insertWidget(4, sort_button2)
    layout.insertWidget(5, mark_button)
    layout.insertWidget(6, hint_button)
    
    the_profile_will_change = False # –µ—Å–ª–∏ –º–µ–Ω—è—é—Ç –ø—Ä–æ—Ñ–∏–ª—å   
    buttons = []
    group = QButtonGroup()
    group.setExclusive(True)

    for i in range(0, 6):
        btn = QToolButton()
        if i > 0:
            btn.setText(str(i))
            if i == current_profile and i == active_profile:
                # –Ø—Ä–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                font = btn.font()
                font.setBold(True)
                btn.setFont(font) 
                btn.setStyleSheet("")  # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∏–ª—å  
                btn.setStyleSheet("""
                    QToolButton {
                        background-color: #00d700;
                        color: #11C;                    
                    }
                """)   
            elif i == current_profile:     
                btn.setStyleSheet("")  # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∏–ª—å  
                # –Ø—Ä–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
                btn.setStyleSheet("""
                    QToolButton {
                        background-color: #00d700;
                        color: #000000;                       
                    }
                """) 
            elif i == active_profile:
                font = btn.font()
                font.setBold(True)
                btn.setFont(font)     
                btn.setStyleSheet("")  # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∏–ª—å                        
                # –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                btn.setStyleSheet("""
                    QToolButton {                        
                        color: #11C;                      
                    }
                """)                      
        else:
            btn.setText("s‚§û")  
            btn.setStyleSheet("")  # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∏–ª—å          

        btn.setCheckable(True)
        group.addButton(btn, i)
        buttons.append(btn)

    buttons[current_profile].setChecked(True)
    msg = localizationF("Save_the_current", "Save the current selection of active add-ons to the profile whose number you click after this button")
    buttons[0].setToolTip(msg) 
    msg = localizationF("Profile_of_allowed", "Profile of allowed add-ons (bold - loaded in anki)")
    buttons[1].setToolTip(msg) 
    buttons[2].setToolTip(msg) 
    buttons[3].setToolTip(msg) 
    buttons[4].setToolTip(msg) 
    buttons[5].setToolTip(msg) 

    layoutBTN = QHBoxLayout()
    for btn in buttons:
        layoutBTN.addWidget(btn)

    containerBTN = QWidget()
    containerBTN.setLayout(layoutBTN)
    layout.insertWidget(7, containerBTN)




    def on_button_selected(button):        
        global active_profile, current_profile, profile_list_addons, the_profile_will_change
        id = group.id(button)
        # print(f"on_button_selected: {id}")
        

        if id > 0:
            save_profile(current_profile) 
            current_profile = id

        for idx, btn in enumerate(buttons):
            if idx == 0:
                if id == 0:
                    btn.setStyleSheet("""
                        QToolButton {
                            background-color: #cc3344;
                            color: #000000;                            
                        }
                    """)    
                else:
                    btn.setStyleSheet("")  # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∏–ª—å

            else:
                if idx == current_profile and idx == active_profile:
                    font = btn.font()
                    font.setBold(True)
                    btn.setFont(font) 
                    if id != 0:
                        # –Ø—Ä–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è                        
                        btn.setStyleSheet("")  # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∏–ª—å  
                        btn.setStyleSheet("""
                            QToolButton {
                                background-color: #00d700;
                                color: #006;                                  
                            }
                        """)   
                    else:
                        # –Ø—Ä–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è                        
                        btn.setStyleSheet("")  # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∏–ª—å  
                        btn.setStyleSheet("""
                            QToolButton {
                                border: 1px solid #00d700;
                                color: #006;                                  
                            }
                        """)

                elif idx == current_profile:     
                    if id != 0:
                        btn.setStyleSheet("")  # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∏–ª—å  
                        # –Ø—Ä–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
                        btn.setStyleSheet("""
                            QToolButton {
                                background-color: #00d700;
                                color: #000000;                      
                            }
                        """) 
                    else:
                        btn.setStyleSheet("""
                            QToolButton {
                                border: 1px solid #00d700;
                                color: #000000;                            
                            }
                        """)
                elif idx == active_profile:                    
                    font = btn.font()
                    font.setBold(True)
                    btn.setFont(font)     
                    btn.setStyleSheet("")  # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∏–ª—å                        
                    # –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                    btn.setStyleSheet("""
                        QToolButton {                        
                            color: #006;                               
                        }
                    """) 
                else:
                    btn.setStyleSheet("")  # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∏–ª—å –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö


        if id > 0:                                   
            if not the_profile_will_change:
                load_profile(id)  
            active_profile_save_meta(id)
            the_profile_will_change = False
        else:
            the_profile_will_change = True

            

        
    group.buttonClicked.connect(on_button_selected)
              
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∫–Ω–æ–ø–∫–∞–º
    sort_button1.clicked.connect(lambda: sort1(addons_list, dialog))
    sort_button2.clicked.connect(lambda: sort2(addons_list, dialog))
    mark_button.clicked.connect(lambda: mark_item_list(addons_list, dialog))
    hint_button.clicked.connect(lambda: hint_item_list(addons_list, dialog))

    

def active_profile_save_meta(profN):
    """—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""       
    if  profN < 1 or profN > 5: # –µ—Å–ª–∏ –≤–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
        return
    try:
        # –ü—É—Ç—å –∫ meta.json
        addon_dir = Path(mw.addonManager.addonsFolder()) / __name__ 
        meta_path = addon_dir / "meta.json"
        if meta_path.exists():
            original_mtime = os.path.getmtime(meta_path) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            with open(meta_path, "r", encoding="utf-8") as f:
                meta = json.load(f)
                with open(meta_path, "w", encoding="utf-8") as f:                    
                    meta["active_profile"] = profN
                    json.dump(meta, f, ensure_ascii=False, indent=4)
            os.utime(meta_path, (original_mtime, original_mtime))  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    except Exception as e:          
        logError(e)             
        
        
def load_profile(profN):
    """–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""    
    global profile_list_addons
    if  profN < 1 or profN > 5: # –µ—Å–ª–∏ –≤–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
        return
    try:
        # –ü—É—Ç—å –∫ meta.json
        addon_dir = Path(mw.addonManager.addonsFolder()) / __name__
        meta_path = addon_dir / "meta.json"

        # –ß–∏—Ç–∞–µ–º meta.json
        if meta_path.exists():
            with open(meta_path, "r", encoding="utf-8") as f:
                meta = json.load(f)

                profile_key = f"profile{profN}"
                if profile_key in meta:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é                    
                    profile_list_addons = meta.get(profile_key, [])     
                    active_profile_save_meta(profN)  

                    addonList = current_dialog.form.addonList
                    mgr = current_dialog.mgr
                    current_dialog.addons = list(mgr.all_addon_meta())   
                    all_addon_dir = Path(mw.addonManager.addonsFolder())
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ meta.json –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–¥–æ–Ω–∞
                    for addon in current_dialog.addons:
                        addon_dir = all_addon_dir / addon.dir_name
                        meta_path = addon_dir / "meta.json"
                        original_mtime = os.path.getmtime(meta_path) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        enad = addon.dir_name in profile_list_addons
                        if addon.enabled != enad:                            
                            mw.addonManager.toggleEnabled(addon.dir_name, enad)
                            os.utime(meta_path, (original_mtime, original_mtime))  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    custom_redrawAddons(current_dialog)

                                 
    except Exception as e:        
        logError(e)            
    

def save_profile(profN):
    """—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    global profile_list_addons        
    if  profN < 1 or profN > 5: # –µ—Å–ª–∏ –≤–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
        return

    addonList = current_dialog.form.addonList
    mgr = current_dialog.mgr
    current_dialog.addons = list(mgr.all_addon_meta())   

    profile_list_addons = []

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ meta.json –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–¥–æ–Ω–∞
    for addon in current_dialog.addons:
        if addon.enabled:
            profile_list_addons.append(addon.dir_name)


    try:
        # –ü—É—Ç—å –∫ meta.json
        addon_dir = Path(mw.addonManager.addonsFolder()) / __name__
        meta_path = addon_dir / "meta.json"
        if meta_path.exists():            
            original_mtime = os.path.getmtime(meta_path) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            with open(meta_path, "r", encoding="utf-8") as f:
                meta = json.load(f)
                with open(meta_path, "w", encoding="utf-8") as f:
                        profile_key = f"profile{profN}"
                        if profile_key in meta:
                            meta[profile_key] = profile_list_addons
                            json.dump(meta, f, ensure_ascii=False, indent=4)                            
            os.utime(meta_path, (original_mtime, original_mtime))  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        
    except Exception as e:          
        logError(e)
            